#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Neo4j Database Cleaner
X√≥a to√†n b·ªô d·ªØ li·ªáu trong Neo4j database
"""

import os
from neo4j import GraphDatabase

def clear_neo4j_database():
    """X√≥a to√†n b·ªô d·ªØ li·ªáu trong Neo4j database"""
    
    # L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
    uri = os.getenv("NEO4J_URI")
    username = os.getenv("NEO4J_USERNAME") 
    password = os.getenv("NEO4J_PASSWORD")
    
    if not all([uri, username, password]):
        print("‚ùå Thi·∫øu th√¥ng tin k·∫øt n·ªëi Neo4j!")
        print("Vui l√≤ng thi·∫øt l·∫≠p c√°c bi·∫øn m√¥i tr∆∞·ªùng:")
        print("  export NEO4J_URI='bolt://localhost:7687'")
        print("  export NEO4J_USERNAME='neo4j'")
        print("  export NEO4J_PASSWORD='your_password'")
        return False
    
    try:
        # K·∫øt n·ªëi ƒë·∫øn Neo4j
        driver = GraphDatabase.driver(uri, auth=(username, password))
        
        with driver.session() as session:
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng nodes hi·ªán t·∫°i
            result = session.run("MATCH (n) RETURN count(n) as count")
            node_count = result.single()["count"]
            
            if node_count == 0:
                print("‚úÖ Database ƒë√£ tr·ªëng, kh√¥ng c·∫ßn x√≥a g√¨!")
                return True
            
            print(f"üìä T√¨m th·∫•y {node_count} nodes trong database")
            
            # X√°c nh·∫≠n x√≥a
            confirm = input("‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a TO√ÄN B·ªò d·ªØ li·ªáu? (yes/no): ").lower().strip()
            
            if confirm not in ['yes', 'y']:
                print("‚ùå H·ªßy b·ªè thao t√°c x√≥a")
                return False
            
            print("üóëÔ∏è ƒêang x√≥a to√†n b·ªô d·ªØ li·ªáu...")
            
            # X√≥a to√†n b·ªô d·ªØ li·ªáu (nodes v√† relationships)
            session.run("MATCH (n) DETACH DELETE n")
            
            # Ki·ªÉm tra l·∫°i
            result = session.run("MATCH (n) RETURN count(n) as count")
            remaining_count = result.single()["count"]
            
            if remaining_count == 0:
                print("‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu th√†nh c√¥ng!")
            else:
                print(f"‚ö†Ô∏è C√≤n l·∫°i {remaining_count} nodes ch∆∞a ƒë∆∞·ª£c x√≥a")
            
            # X√≥a indexes v√† constraints (optional)
            try:
                print("üîß ƒêang x√≥a indexes v√† constraints...")
                
                # L·∫•y danh s√°ch constraints
                constraints_result = session.run("SHOW CONSTRAINTS")
                constraints = [record["name"] for record in constraints_result if record.get("name")]
                
                # X√≥a t·ª´ng constraint
                for constraint_name in constraints:
                    try:
                        session.run(f"DROP CONSTRAINT {constraint_name}")
                        print(f"  ‚úÖ ƒê√£ x√≥a constraint: {constraint_name}")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a constraint {constraint_name}: {e}")
                
                # L·∫•y danh s√°ch indexes
                indexes_result = session.run("SHOW INDEXES")
                indexes = [record["name"] for record in indexes_result if record.get("name") and record.get("type") != "LOOKUP"]
                
                # X√≥a t·ª´ng index
                for index_name in indexes:
                    try:
                        session.run(f"DROP INDEX {index_name}")
                        print(f"  ‚úÖ ƒê√£ x√≥a index: {index_name}")
                    except Exception as e:
                        print(f"  ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a index {index_name}: {e}")
                        
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi x√≥a indexes/constraints: {e}")
            
        driver.close()
        print("üéâ Ho√†n th√†nh vi·ªác d·ªçn d·∫πp database!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c x√≥a database: {e}")
        return False

def main():
    """H√†m main"""
    print("üóëÔ∏è Neo4j Database Cleaner")
    print("=" * 40)
    
    success = clear_neo4j_database()
    
    if success:
        print("\nüí° Database ƒë√£ s·∫µn s√†ng cho vi·ªác import d·ªØ li·ªáu m·ªõi!")
    else:
        print("\nüí• C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√≥a database")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())