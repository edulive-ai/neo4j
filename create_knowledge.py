#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Create Knowledge Nodes for To√°n L·ªõp 1
Import tr·ª±c ti·∫øp v√†o Neo4j database
"""

import os
import uuid
from datetime import datetime
from neo4j import GraphDatabase
import logging
from dotenv import load_dotenv

load_dotenv()

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Neo4j connection
NEO4J_URI = os.getenv("NEO4J_URI", "bolt://localhost:7687")
NEO4J_USERNAME = os.getenv("NEO4J_USERNAME", "neo4j")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD", "password")

class KnowledgeImporter:
    def __init__(self):
        self.driver = None
        self.connect()
    
    def connect(self):
        """K·∫øt n·ªëi t·ªõi Neo4j"""
        try:
            self.driver = GraphDatabase.driver(
                NEO4J_URI, 
                auth=(NEO4J_USERNAME, NEO4J_PASSWORD)
            )
            # Test connection
            with self.driver.session() as session:
                session.run("RETURN 1")
            logger.info("‚úÖ Connected to Neo4j successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Neo4j: {e}")
            raise
    
    def close(self):
        """ƒê√≥ng k·∫øt n·ªëi"""
        if self.driver:
            self.driver.close()
            logger.info("üîí Neo4j connection closed")
    
    def generate_uuid(self):
        """Generate unique UUID"""
        return str(uuid.uuid4())
    
    def get_knowledge_list(self):
        """Danh s√°ch t·∫•t c·∫£ ki·∫øn th·ª©c To√°n L·ªõp 1"""
        return [
            "Tr√™n - D∆∞·ªõi, Ph·∫£i - Tr√°i, Tr∆∞·ªõc - Sau, ·ªû gi·ªØa",
            "H√¨nh vu√¥ng - H√¨nh tr√≤n - H√¨nh tam gi√°c - H√¨nh ch·ªØ nh·∫≠t",
            "C√°c s·ªë 1, 2, 3",
            "C√°c s·ªë 4, 5, 6", 
            "C√°c s·ªë 7, 8, 9",
            "S·ªë 0",
            "S·ªë 10",
            "Nhi·ªÅu h∆°n - √çt h∆°n - B·∫±ng nhau",
            "L·ªõn h∆°n, d·∫•u >. B√© h∆°n, d·∫•u <. B·∫±ng nhau, d·∫•u =",
            "Em √¥n l·∫°i nh·ªØng g√¨ ƒë√£ h·ªçc",
            "L√†m quen v·ªõi Ph√©p c·ªông - D·∫•u c·ªông",
            "L√†m quen v·ªõi Ph√©p c·ªông - D·∫•u c·ªông (ti·∫øp theo)",
            "Ph√©p c·ªông trong ph·∫°m vi 6",
            "Ph√©p c·ªông trong ph·∫°m vi 6 (ti·∫øp theo)",
            "Ph√©p c·ªông trong ph·∫°m vi 10",
            "Ph√©p c·ªông trong ph·∫°m vi 10 (ti·∫øp theo)",
            "Kh·ªëi h·ªôp ch·ªØ nh·∫≠t - Kh·ªëi l·∫≠p ph∆∞∆°ng",
            "L√†m quen v·ªõi Ph√©p tr·ª´ - D·∫•u tr·ª´",
            "Ph√©p tr·ª´ trong ph·∫°m vi 6",
            "Ph√©p tr·ª´ trong ph·∫°m vi 6 (ti·∫øp theo)",
            "Ph√©p tr·ª´ trong ph·∫°m vi 10",
            "Ph√©p tr·ª´ trong ph·∫°m vi 10 (ti·∫øp theo)",
            "C√°c s·ªë 11, 12, 13, 14, 15, 16",
            "C√°c s·ªë 17, 18, 19, 20",
            "C√°c s·ªë 10, 20, 30, 40, 50, 60, 70, 80, 90",
            "C√°c s·ªë c√≥ hai ch·ªØ s·ªë (t·ª´ 21 ƒë·∫øn 40)",
            "C√°c s·ªë c√≥ hai ch·ªØ s·ªë (t·ª´ 41 ƒë·∫øn 70)",
            "C√°c s·ªë c√≥ hai ch·ªØ s·ªë (t·ª´ 71 ƒë·∫øn 99)",
            "C√°c s·ªë ƒë·∫øn 100",
            "Ch·ª•c v√† ƒë∆°n v·ªã",
            "So s√°nh c√°c s·ªë trong ph·∫°m vi 100",
            "D√†i h∆°n - Ng·∫Øn h∆°n",
            "ƒêo ƒë·ªô d√†i",
            "XƒÉng-ti-m√©t",
            "Ph√©p c·ªông d·∫°ng 14 + 3",
            "Ph√©p tr·ª´ d·∫°ng 17 - 2",
            "C·ªông, tr·ª´ c√°c s·ªë tr√≤n ch·ª•c",
            "Ph√©p c·ªông d·∫°ng 25 + 14",
            "Ph√©p c·ªông d·∫°ng 25 + 4, 25 + 40",
            "Ph√©p tr·ª´ d·∫°ng 39 ‚Äì 15",
            "Ph√©p tr·ª´ d·∫°ng 27 ‚Äì 4, 63 ‚Äì 40",
            "C√°c ng√†y trong tu·∫ßn l·ªÖ",
            "ƒê·ªìng h·ªì - th·ªùi gian"
        ]
    
    def check_existing_knowledge(self, session):
        """Ki·ªÉm tra Knowledge nodes ƒë√£ t·ªìn t·∫°i"""
        result = session.run("MATCH (k:Knowledge) RETURN count(k) as count")
        count = result.single()["count"]
        logger.info(f"üìä Found {count} existing Knowledge nodes")
        return count
    
    def clear_existing_knowledge(self, session):
        """X√≥a t·∫•t c·∫£ Knowledge nodes c≈© (n·∫øu c·∫ßn)"""
        result = session.run("MATCH (k:Knowledge) DELETE k RETURN count(k) as deleted")
        deleted = result.consume().counters.nodes_deleted
        logger.info(f"üóëÔ∏è Deleted {deleted} existing Knowledge nodes")
        return deleted
    
    def create_knowledge_node(self, session, knowledge_data):
        """T·∫°o m·ªôt Knowledge node"""
        query = """
        CREATE (k:Knowledge {
            id: $id,
            name: $name,
            description: $description,
            order: $order,
            subject: $subject,
            grade: $grade,
            createdAt: $createdAt,
            updatedAt: $updatedAt
        })
        RETURN k
        """
        
        result = session.run(query, knowledge_data)
        return result.single()["k"]
    
    def bulk_create_knowledge(self, session, knowledge_list):
        """T·∫°o nhi·ªÅu Knowledge nodes c√πng l√∫c (optimized)"""
        query = """
        UNWIND $knowledge_list as knowledge
        CREATE (k:Knowledge {
            id: knowledge.id,
            name: knowledge.name,
            description: knowledge.description,
            order: knowledge.order,
            subject: knowledge.subject,
            grade: knowledge.grade,
            createdAt: knowledge.createdAt,
            updatedAt: knowledge.updatedAt
        })
        RETURN count(k) as created_count
        """
        
        result = session.run(query, knowledge_list=knowledge_list)
        return result.single()["created_count"]
    
    def import_knowledge_nodes(self, clear_existing=False, use_bulk=True):
        """Import t·∫•t c·∫£ Knowledge nodes"""
        knowledge_names = self.get_knowledge_list()
        
        # Prepare data
        knowledge_data = []
        now = datetime.now().isoformat()
        
        for i, name in enumerate(knowledge_names, 1):
            data = {
                "id": self.generate_uuid(),
                "name": name,
                "description": f"Ki·∫øn th·ª©c v·ªÅ: {name}",
                "order": i,
                "subject": "To√°n",
                "grade": "L·ªõp 1",
                "createdAt": now,
                "updatedAt": now
            }
            knowledge_data.append(data)
        
        # Import to Neo4j
        with self.driver.session() as session:
            # Check existing
            existing_count = self.check_existing_knowledge(session)
            
            # Clear if requested
            if clear_existing and existing_count > 0:
                user_input = input(f"‚ùì Delete {existing_count} existing Knowledge nodes? (y/N): ")
                if user_input.lower() == 'y':
                    self.clear_existing_knowledge(session)
                else:
                    logger.info("‚è≠Ô∏è Skipping deletion, adding new nodes...")
            
            # Create nodes
            logger.info(f"üìù Creating {len(knowledge_data)} Knowledge nodes...")
            
            if use_bulk:
                # Bulk import (faster)
                try:
                    created_count = self.bulk_create_knowledge(session, knowledge_data)
                    logger.info(f"‚úÖ Bulk created {created_count} Knowledge nodes")
                except Exception as e:
                    logger.error(f"‚ùå Bulk import failed: {e}")
                    logger.info("üîÑ Falling back to individual creation...")
                    use_bulk = False
            
            if not use_bulk:
                # Individual import (slower but more reliable)
                created_count = 0
                errors = []
                
                for i, data in enumerate(knowledge_data, 1):
                    try:
                        node = self.create_knowledge_node(session, data)
                        logger.info(f"‚úÖ {i:2d}. {data['name']}")
                        created_count += 1
                    except Exception as e:
                        error_msg = f"‚ùå {i:2d}. {data['name']} - {str(e)}"
                        logger.error(error_msg)
                        errors.append(error_msg)
                
                if errors:
                    logger.error(f"üí• {len(errors)} errors occurred:")
                    for error in errors:
                        logger.error(f"   {error}")
        
        return created_count, len(knowledge_data)
    
    def verify_import(self):
        """Ki·ªÉm tra k·∫øt qu·∫£ import"""
        with self.driver.session() as session:
            # Count total
            result = session.run("MATCH (k:Knowledge) RETURN count(k) as total")
            total = result.single()["total"]
            
            # Sample some records
            result = session.run("""
                MATCH (k:Knowledge) 
                RETURN k.name as name, k.order as order 
                ORDER BY k.order 
                LIMIT 5
            """)
            
            sample = [f"{record['order']:2d}. {record['name']}" for record in result]
            
            logger.info(f"üîç Verification:")
            logger.info(f"   Total Knowledge nodes: {total}")
            logger.info(f"   Sample records:")
            for item in sample:
                logger.info(f"      {item}")
            
            return total

def main():
    """Main function"""
    logger.info("üöÄ Starting Knowledge Import for To√°n L·ªõp 1...")
    logger.info("=" * 70)
    
    importer = None
    try:
        # Initialize importer
        importer = KnowledgeImporter()
        
        # Import knowledge nodes
        created, total = importer.import_knowledge_nodes(
            clear_existing=True,  # Set to False if you don't want to clear existing
            use_bulk=True         # Use bulk import for better performance
        )
        
        logger.info("=" * 70)
        logger.info(f"üìä Import Summary:")
        logger.info(f"   Total processed: {total}")
        logger.info(f"   Successfully created: {created}")
        
        # Verify
        logger.info("=" * 70)
        final_count = importer.verify_import()
        
        logger.info("=" * 70)
        logger.info("üéâ Import completed successfully!")
        logger.info(f"‚úÖ {final_count} Knowledge nodes are now in Neo4j")
        
    except Exception as e:
        logger.error(f"üí• Import failed: {e}")
        return 1
    
    finally:
        if importer:
            importer.close()
    
    return 0

if __name__ == "__main__":
    exit(main())